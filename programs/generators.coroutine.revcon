@coroutine

function square(int a, int result) {
  result += a * a
}

coroutine main(list int hist) {
  local int value 0
  local int tmp 0

  # Linear Infinity List
  local int i 0
  local function(int,int) sq @square
  spawn lil linearInfinityList (sq)
  resume lil (i,value) # 0 => 1
  tmp += value
  push tmp hist
  resume lil (i,value) # 1 => 4
  tmp += value
  push tmp hist
  resume lil (i,value) # 4 => 9
  tmp += value
  push tmp hist
  resume lil (i,value) # 9 => 16
  tmp += value
  push tmp hist
  despawn lil linearInfinityList serve (sq)
  delocal function(int,int) sq @square
  delocal int i 4
  value -= 16

  # Infinite ones
  local int i 0
  local int m 1
  spawn inf1 constantInfinityList (m)
  resume inf1 (i,value) # 0 => 1
  tmp += value
  push tmp hist
  resume inf1 (i,value) # 1 => 1
  tmp += value
  push tmp hist
  resume inf1 (i,value) # 1 => 1
  tmp += value
  push tmp hist
  resume inf1 (i,value) # 1 => 1
  tmp += value
  push tmp hist
  resume inf1 (i,value) # 1 => 1
  tmp += value
  push tmp hist
  despawn inf1 constantInfinityList serve (m)
  delocal int m 1
  delocal int i 5
  value -= 1
  
  delocal int tmp 0
  delocal int value 0
}

coroutine linearInfinityList (int i, int value) with (function(int,int) fn) {
  from i == 0
  do
    i += 1
    call fn (i, value)
    yield serve
    uncall fn (i,value)
  until 0
}

coroutine constantInfinityList(int i, int value) with (int n) {
  value += n
  from i == 0
  do 
    i += 1
    yield serve
  until 0
}
